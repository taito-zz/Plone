[buildout]
parts =
    scripts
    omelette
    test
    coverage-test
    source-scripts
    code-analysis
extensions +=
    mr.developer
sources = sources

[sources]
Products.CMFPlone = git git@github.com:taito/Products.CMFPlone.git
Products.Carousel = git git@github.com:collective/Products.Carousel.git
Products.PFGExtendedMailAdapter = git git@github.com:collective/Products.PFGExtendedMailAdapter.git
Products.PFGSelectionStringField = git git@github.com:collective/Products.PFGSelectionStringField.git
abita.development = git git@github.com:taito/abita.development.git
collective.base = git git@github.com:taito/collective.base.git
collective.cropimage = git git@github.com:collective/collective.cropimage.git
collective.folderlogo = git git@github.com:collective/collective.folderlogo.git
collective.microsite = git git@github.com:collective/collective.microsite.git
collective.pfg.payment = git git@github.com:taito/collective.pfg.payment
collective.pfg.showrequest = git git@github.com:taito/collective.pfg.showrequest
collective.portlet.contentsearch = git git@github.com:collective/collective.portlet.contentsearch.git
collective.searchevent = git git@github.com:collective/collective.searchevent.git
hexagonit.socialbutton = git git@github.com:taito/hexagonit.socialbutton.git
py-moneyed = git https://github.com/taito/py-moneyed.git
sll.baselocales = git git@github.com:taito/sll.baselocales.git
sll.basepolicy = git git@github.com:taito/sll.basepolicy.git
sll.basetheme = git git@github.com:taito/sll.basetheme.git
sll.carousel = git git@github.com:taito/sll.carousel.git
sll.templates = git git@github.com:taito/sll.templates.git


[development]
eggs =
    Products.DocFinderTab
    Products.PDBDebugMode
    Products.PrintingMailHost
# wildcard.fixpersistentutilities

[instance]
http-address = 8080
eggs +=
    ${development:eggs}

[scripts]
recipe = zc.recipe.egg:scripts
eggs =
    i18ndude
    jarn.mkrelease
    jarn.viewdoc
    z3c.checkversions [buildout]

[source-scripts]
recipe = zc.recipe.egg:scripts
eggs =
    ${instance:eggs}
    ${development:eggs}
    Sphinx
    coverage
    repoze.sphinx.autointerface

[omelette]
recipe = collective.recipe.omelette
eggs =
    ${instance:eggs}
    ${scripts:eggs}
    ${source-scripts:eggs}

[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress', '--exit-with-status']
eggs =
    abita.development [test]
    collective.base [test]

[coverage-test]
recipe = collective.recipe.template
output = ${buildout:bin-directory}/coverage-test
mode = 755
input = inline:
    #!/bin/bash

    ${buildout:bin-directory}/coverage run --source=$(echo $@|tr ' ' ,) ./bin/test $(echo $@|awk -F' ' '{for (i=1;i<=NF;i++) print " -s " $i}'|tr -d '\n')
    ${buildout:bin-directory}/coverage html
    echo "Coverage report is available in file:///${buildout:directory}/coverage-html/index.html"
    #

[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src
multiprocessing = True
flake8-exclude = .ropeproject,bootstrap.py
flake8-ignore = E501,C901
# check-manifest = True
